# Automatically build binary wheels and source packages.
name: cibuildwheel

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

env:
  CIBW_BUILD: "cp3*-manylinux_x86_64 cp3*-macosx_*"
  CIBW_SKIP: "cp35-* cp36-* cp37-* cp38-*"
  CIBW_BEFORE_BUILD_LINUX: "sh scripts/build_linux.sh"
  CIBW_REPAIR_WHEEL_COMMAND_LINUX: "LD_LIBRARY_PATH=$(pwd)/lib/poppler/build/:$LD_LIBRARY_PATH auditwheel repair -w {dest_dir} {wheel}"
  CIBW_BEFORE_BUILD_MACOS: "sh scripts/build_macos.sh"
  CIBW_REPAIR_WHEEL_COMMAND_MACOS: "MACOSX_DEPLOYMENT_TARGET=\"$(sw_vers --productVersion | cut -c1-2).0\" DYLD_LIBRARY_PATH=$(pwd)/lib/poppler/build:$DYLD_LIBRARY_PATH delocate-wheel -w {dest_dir} -v {wheel}"
  # CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "call scripts/wheel_repair.bat {wheel} {dest_dir}"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} with python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-13-large, macos-14, macos-14-large, macos-15, macos-15-large]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: ${{ matrix.python-version }}

      # - uses: ilammy/msvc-dev-cmd@v1
      #   with:
      #     arch: x86

      # - name: Build dependencies & wheels (Windows / x86)
      #   if: runner.os == 'Windows'
      #   shell: cmd
      #   run: |
      #     call scripts\build_win_x86.bat
      #     python -m pip --disable-pip-version-check install cibuildwheel==1.10.0
      #     python -m cibuildwheel --output-dir wheelhouse
      #   env:
      #     CIBW_BUILD: "cp3*-win32"
      #     CIBW_SKIP: "cp35-* cp36-* cp37-* cp38-*"
      #     DISTUTILS_USE_SDK: 1
      #     MSSdk: 1

      # - uses: ilammy/msvc-dev-cmd@v1
      #   with:
      #     arch: amd64

      # - name: Build dependencies & wheels (Windows / amd64)
      #   if: runner.os == 'Windows'
      #   shell: cmd
      #   run: |
      #     call scripts\build_win_x64.bat
      #     python -m pip --disable-pip-version-check install cibuildwheel==1.10.0
      #     python -m cibuildwheel --output-dir wheelhouse
      #   env:
      #     CIBW_BUILD: "cp3*-win_amd64"
      #     CIBW_SKIP: "cp35-* cp36-* cp37-* cp38-*"
      #     DISTUTILS_USE_SDK: 1
      #     MSSdk: 1

      - name: Install cibuildwheel & build wheels (Linux & MacOS)
        if: runner.os != 'Windows'
        run: |
          python -m pip --disable-pip-version-check install cibuildwheel>=2.22.0
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_password }}
